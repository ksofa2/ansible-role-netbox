---
# Setup Netbox
- name: check if there is a netbox install
  stat:
    path: "{{ netbox_install_directory }}"
  register: netbox_installed

- name: download netbox using git
  git:
    repo: "{{ netbox_git_url }}"
    version: "{{ netbox_version }}"
    dest: "{{ netbox_install_directory }}"
  register: netbox_downloaded

- name: install virtualenv using pip
  pip:
    name: virtualenv
    extra_args: "--upgrade"
    executable: "{{ netbox_pip_binary }}"

- name: install napalm for pulling devices info
  pip:
    name: napalm
    extra_args: "--upgrade"
    virtualenv: "{{ netbox_install_directory }}"
    virtualenv_python: "{{ netbox_python_binary }}"
  when: netbox_use_napalm and (netbox_devices_username is defined) and
        (netbox_devices_password is defined)

- block:
  - name: delete stale bytecode
    command: find . -name '*.pyc' -delete
    args:
      chdir: "{{ netbox_install_directory }}"

  - name: install python requirements
    pip:
      requirements: "{{ netbox_install_directory }}/requirements.txt"
      extra_args: "--upgrade"
      virtualenv: "{{ netbox_install_directory }}"
      virtualenv_python: "{{ netbox_python_binary }}"
  when: netbox_downloaded.changed

- name: configure netbox
  template:
    src: configuration.py.j2
    dest: "{{ netbox_install_directory }}/netbox/netbox/configuration.py"
    owner: root
    group: root
    mode: 0644
  notify: restart netbox app

- block:
  - name: install django-auth-ldap
    pip:
      name: django-auth-ldap
      extra_args: "--upgrade"
      virtualenv: "{{ netbox_install_directory }}"
      virtualenv_python: "{{ netbox_python_binary }}"

  - name: configure ldap auth
    copy:
      content: "{{ netbox_ldap_config }}"
      dest: "{{ netbox_install_directory }}/netbox/netbox/ldap_config.py"
      owner: root
      group: root
      mode: 0644
  when: netbox_setup_ldap_auth

- block:
  - name: perform database migration
    django_manage:
      app_path: "{{ netbox_install_directory }}/netbox"
      command: migrate
      virtualenv: "{{ netbox_install_directory }}"

  - name: collect static files
    django_manage:
      app_path: "{{ netbox_install_directory }}/netbox"
      command: collectstatic
      virtualenv: "{{ netbox_install_directory }}"
  when: netbox_downloaded.changed

- block:
  - name: create super user
    django_manage:
      app_path: "{{ netbox_install_directory }}/netbox"
      command: "createsuperuser --noinput --username={{ netbox_superuser_username }} --email={{ netbox_superuser_email }}"
      virtualenv: "{{ netbox_install_directory }}"

  - name: load initial data
    django_manage:
      app_path: "{{ netbox_install_directory }}/netbox"
      command: loaddata
      fixtures: initial_data
      virtualenv: "{{ netbox_install_directory }}"
    when: netbox_load_initial_data
  when: not netbox_installed.stat.exists
